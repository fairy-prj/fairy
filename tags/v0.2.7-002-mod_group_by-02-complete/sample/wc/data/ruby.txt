Ruby (programming language) - Wikipedia, the free encyclopediaYou can support 
Wikipedia by making a tax-deductible donation.Ruby (programming language)
From Wikipedia, the free encyclopedia
  (Redirected from Ruby programming language)
Jump to: navigation, search
  Ruby
      Paradigmmulti-paradigm
      Appeared in1995
      Designed byYukihiro Matsumoto
      DeveloperYukihiro Matsumoto (among others)
      Typing disciplinedynamic ("duck")
      Major implementationsRuby MRI, YARV, JRuby, Rubinius
      InfluencedGroovy, Perl 6
      LicenseRuby License
      GNU General Public License
      Websitewww.ruby-lang.org
Ruby is a dynamic, reflective, general purpose object-oriented programming 
language that combines syntax inspired by Perl with Smalltalk-like features. 
Ruby originated in Japan during the mid-1990s and was initially developed and 
designed by Yukihiro "Matz" Matsumoto.
Ruby supports multiple programming paradigms, including functional, object 
oriented, imperative and reflection. It also has a dynamic type system and 
automatic memory management; it is therefore similar in varying respects to 
Python, Perl, Lisp, Dylan, and CLU.
The standard 1.8.6 (stable) implementation is written in C, as a single-pass 
interpreted language. There is currently no specification of the Ruby language, 
so the original implementation is considered to be the de facto reference. As of 
2008, there are a number of complete or upcoming alternative implementations of 
the Ruby language, including YARV, JRuby, Rubinius, IronRuby, and MacRuby, each 
of which takes a different approach, with JRuby and IronRuby providing 
just-in-time compilation functionality. The official 1.9 (development) branch 
uses YARV, and so will 2.0, and will eventually supersede the slower Ruby MRI.
      Contents [hide]
        1 History 
          1.1 Etymology of the name "Ruby" 
          1.2 First publication 
          1.3 Ruby 1.0 
          1.4 Ruby 1.8.7 
        2 Philosophy 
        3 Features 
        4 Semantics 
        5 Syntax 
        6 "Gotchas" 
          6.1 Language comparison 
          6.2 Language features 
        7 Interaction 
        8 Examples 
          8.1 Strings 
          8.2 Collections 
          8.3 Blocks and iterators 
          8.4 Classes 
          8.5 Exceptions 
          8.6 Metaprogramming 
          8.7 More examples 
        9 Implementations 
        10 Criticism 
        11 Repositories and libraries 
        12 See also 
        13 References 
        14 External links 


[edit] History
 
Yukihiro Matsumoto, the creator of Ruby.Ruby was conceived on February 24, 1993 
by Yukihiro Matsumoto who wished to create a new language that balanced 
functional programming with imperative programming.[1] According to Matsumoto he 
"wanted a scripting language that was more powerful than Perl, and more 
object-oriented than Python. That's why I decided to design my own language".[2]
[edit] Etymology of the name "Ruby"
The name "Ruby" was decided on during an online chat session between Matsumoto 
and Keiju Ishitsuka on February 24, 1993, before any code had been written for 
the language.[3] Initially two names were proposed: "Coral" and "Ruby", with the 
latter the one being chosen as the name by Matsumoto in a later email to 
Ishitsuka.[4] Matsumoto has later stated that a factor in choosing the name 
"Ruby" was because it was the birthstone of one of his colleagues.[5] Later it 
was recognized that pearl is the birthstone for the month of June, while ruby is 
the birthstone for July, implying Ruby as the successor of Perl.[6][7]
[edit] First publication
The first public release of Ruby 0.95 was announced on Japanese domestic 
newsgroups on December 21, 1995.[8][9] Subsequently three more versions of Ruby 
were released in two days.[10] The release coincided with the launch of the 
Japanese language ruby-list mailing list which was the first mailing list for 
the new language.
Already present at this stage of development were many of the features familiar 
in later releases of Ruby, including object oriented design, classes with 
inheritance, mixins, iterators, closures, exception handling, and garbage 
collection.[11]
[edit] Ruby 1.0
Ruby reached version 1.0 on December 25, 1996.[12]
Following the release of Ruby 1.3 in 1999 the first English language mailing 
list ruby-talk began,[13] which signaled a growing interest in the language 
outside of Japan. In September 2000, the first English language book Programming 
Ruby was printed, which was later freely released to the public further widening 
the adoption of Ruby amongst native English speakers.
[edit] Ruby 1.8.7
As of June 2008, the latest stable version of the reference implementation is 
1.8.7.
[edit] Philosophy
The language's creator, Yukihiro "Matz" Matsumoto, has said that Ruby is 
designed for programmer productivity and fun, following the principles of good 
user interface design.[14] He stresses that systems design needs to emphasize 
human, rather than computer, needs [15]:
      “Often people, especially computer engineers, focus on the machines. They 
      think, "By doing this, the machine will run faster. By doing this, the 
      machine will run more effectively. By doing this, the machine will 
      something something something." They are focusing on machines. But in fact 
      we need to focus on humans, on how humans care about doing programming or 
      operating the application of the machines. We are the masters. They are 
      the slaves.”

Ruby is said to follow the principle of least surprise (POLS), meaning that the 
language should behave in such a way as to minimize confusion for experienced 
users. Matsumoto has said his primary design goal was to make a language which 
he himself enjoyed using, by minimizing programmer work and possible confusion. 
He has said he had not applied the principle of least surprise to the design of 
Ruby,[16] but nevertheless the phrase has come to be closely associated with the 
Ruby programming language. The phrase has itself been a source of surprise, as 
novice users may take it to mean that Ruby's behaviors try to closely match 
behaviors familiar from other languages. In a May 2005 discussion on the 
comp.lang.ruby newsgroup, Matsumoto attempted to distance Ruby from POLS, 
explaining that because any design choice will be surprising to someone, he uses 
a personal standard in evaluating surprise. If that personal standard remains 
consistent there will be few surprises for those familiar with the standard.[17]
Matsumoto defined it this way in an interview[18]:
      “Everyone has an individual background. Someone may come from Python, 
      someone else may come from Perl, and they may be surprised by different 
      aspects of the language. Then they come up to me and say, 'I was surprised 
      by this feature of the language, so Ruby violates the principle of least 
      surprise.' Wait. Wait. The principle of least surprise is not for you 
      only. The principle of least surprise means principle of least my 
      surprise. And it means the principle of least surprise after you learn 
      Ruby very well. For example, I was a C++ programmer before I started 
      designing Ruby. I programmed in C++ exclusively for two or three years. 
      And after two years of C++ programming, it still surprises me.”

[edit] Features
  Object-oriented, "everything is an object" 
  Five levels of variable scope: global, class, instance, local, and block 
  Exception handling 
  Iterators and closures (based on passing blocks of code) 
  Native, Perl-like regular expressions at the language level 
  Operator overloading 
  Automatic garbage collecting 
  Highly portable 
  Cooperative multi-threading on all platforms using green threads 
  DLL/Shared library dynamic loading on most platforms 
  Introspection, reflection and metaprogramming 
  Large standard library 
  Supports dependency injection 
  Supports object runtime alteration[19] 
  Continuations and generators 
Ruby currently lacks full support for Unicode, though it has partial support for 
UTF-8.
[edit] Semantics
Ruby is object-oriented: every data type is an object, including classes and 
types which many other languages designate as primitives (such as integers, 
booleans, and "nil"). Every function is a method. Named values (variables) 
always designate references to objects, not the objects themselves. Ruby 
supports inheritance with dynamic dispatch, mixins and singleton methods 
(belonging to, and defined for, a single instance rather than being defined on 
the class). Though Ruby does not support multiple inheritance, classes can 
import modules as mixins. Procedural syntax is supported, but all methods 
defined outside of the scope of a particular object are actually methods of the 
Object class. Since this class is parent to every other class, the changes 
become visible to all classes and objects.
Ruby has been described as a multi-paradigm programming language: it allows 
procedural programming (defining functions/variables outside classes makes them 
part of the root, 'self' Object), with object orientation (everything is an 
object) or functional programming (it has anonymous functions, closures, and 
continuations; statements all have values, and functions return the last 
evaluation). It has support for introspection, reflection and metaprogramming, 
as well as support for interpreter-based[20] threads. Ruby features dynamic 
typing, and supports parametric polymorphism.
According to the Ruby FAQ [21], "If you like Perl, you will like Ruby and be 
right at home with its syntax. If you like Smalltalk, you will like Ruby and be 
right at home with its semantics. If you like Python, you may or may not be put 
off by the huge difference in design philosophy between Python and Ruby/Perl." 
[22]
[edit] Syntax
The syntax of Ruby is broadly similar to Perl and Python. Class and method 
definitions are signaled by keywords. In contrast to Perl, variables are not 
obligatorily prefixed with a sigil. When used, the sigil changes the semantics 
of scope of the variable. The most striking difference from C and Perl is that 
keywords are typically used to define logical code blocks, without braces (i.e., 
pair of { and }). For practical purposes there is no distinction between 
expressions and statements[23]. Line breaks are significant and taken as the end 
of a statement; a semicolon may be equivalently used. Unlike Python, indentation 
is not significant.
One of the differences of Ruby compared to Python and Perl is that Ruby keeps 
all of its instance variables completely private to the class and only exposes 
them through accessor methods (attr_writer, attr_reader, etc). Unlike the 
"getter" and "setter" methods of other languages like C++ or Java, accessor 
methods in Ruby can be written with a single line of code. As invocation of 
these methods does not require the use of parentheses, it is trivial to change 
an instance variable into a full function, without modifying a single line of 
code or having to do any refactoring achieving similar functionality to C# and 
VB.NET property members. Python's property descriptors are similar, but come 
with a tradeoff in the development process. If one begins in Python by using a 
publicly exposed instance variable and later changes the implementation to use a 
private instance variable exposed through a property descriptor, code internal 
to the class may need to be adjusted to use the private variable rather than the 
public property. Ruby removes this design decision by forcing all instance 
variables to be private, but also provides a simple way to declare set and get 
methods. This is in keeping with the idea that in Ruby, one never directly 
accesses the internal members of a class from outside of it. Rather one passes a 
message to the class and receives a response.
See the examples section for samples of code demonstrating Ruby syntax.
[edit] "Gotchas"
[edit] Language comparison
Some features which differ notably from languages such as C or Perl:
  Names which begin with a capital letter are treated as constants, so local 
  variables should begin with a lowercase letter. 
  The sigils $ and @ do not indicate variable data type as in Perl, but rather 
  function as scope resolution operators. 
  To denote floating point numbers, one must follow with a zero digit (99.0) or 
  an explicit conversion (99.to_f). It is insufficient to append a dot (99.), 
  because numbers are susceptible to method syntax. 
  Boolean evaluation of non-boolean data is strict: 0, "" and [] are all 
  evaluated to true. In C, the expression 0 ? 1 : 0 evaluates to 0 (i.e. false). 
  In Ruby, however, it yields 1, as all numbers evaluate to true; only nil and 
  false evaluate to false. A corollary to this rule is that Ruby methods by 
  convention — for example, regular-expression searches — return numbers, 
  strings, lists, or other non-false values on success, but nil on failure 
  (e.g., mismatch). This convention is also used in Smalltalk, where only the 
  special objects true and false can be used in a boolean expression. 
  Versions prior to 1.9 lack a character data type (compare to C, which provides 
  type char for characters). This may cause surprises when slicing strings: 
  "abc"[0] yields 97 (an integer, representing the ASCII code of the first 
  character in the string); to obtain "a" use "abc"[0,1] (a substring of length 
  1) or "abc"[0].chr. 
  The notation statement until expression, unlike other languages' equivalent 
  statements (e.g. do { statement } while (not(expression)); in C/C++/...), 
  actually never runs the statement if the expression is already true. This is 
  because statement until expression is actually syntactic sugar over until 
  expression; statement; end, the equivalent of which in C/C++ is while 
  (not(expression)) statement; just like statement if expression is an 
  equivalent to if expression; statement; end. However, the notation begin 
  statement end until expression in Ruby will in fact run the statement once 
  even if the expression is already true. 
  Because constants are references to objects, changing what a constant refers 
  to generates a warning, but modifying the object itself does not. For example, 
  Greeting << " world!" if Greeting == "Hello" does not generate an error or 
  warning. This is similar to final variables in Java, but Ruby does also have 
  the functionality to "freeze" an object, unlike Java. 
Some features which differ notably from other languages:
  The usual operators for conditional expressions, and and or, do not follow the 
  normal rules of precedence: and does not bind tighter than or. Ruby also has 
  expression operators || and && which work as expected. 
[edit] Language features
  Omission of parentheses around method arguments may lead to unexpected results 
  if the methods take multiple parameters. The Ruby developers have stated that 
  omission of parentheses on multi-parameter methods may be disallowed in future 
  Ruby versions; the current (Nov 2007) Ruby interpreter throws a warning which 
  encourages the writer not to omit (), to avoid ambiguous meaning of code. Not 
  using () is still common practice, and can be especially nice to use Ruby as a 
  human readable domain-specific programming language itself, along with the 
  method called method_missing(). 
A list of "gotchas" may be found in Hal Fulton's book The Ruby Way, 2nd ed (ISBN 
0-672-32884-4), Section 1.5. A similar list in the 1st edition pertained to an 
older version of Ruby (version 1.6), some problems of which have been fixed in 
the meantime. retry, for example, now works with while, until, and for, as well 
as iterators.
[edit] Interaction
  See also: Interactive Ruby Shell 
The Ruby official distribution also includes "irb", an interactive command-line 
interpreter which can be used to test code quickly. The following code fragment 
represents a sample session using irb:
$ irb
irb(main):001:0> puts "Hello, World"
Hello, World
=> nil
irb(main):002:0> 1+2
=> 3
[edit] Examples
The following examples can be run in a Ruby shell such as Interactive Ruby Shell 
or saved in a file and run from the command line by typing ruby <filename>.
Classic Hello world example:
puts "Hello World!"
Some basic Ruby code:
# Everything, including a literal, is an object, so this works:
-199.abs                                                # 199
"ruby is cool".length                                   # 12
"Rick Astley".index("c")                                # 2
"Nice Day Isn't It?".downcase.split(//).sort.uniq.join  # " '?acdeinsty"
Conversions:
puts "What's your favorite number?"
number = gets.chomp
outputnumber = number.to_i + 1
puts outputnumber.to_s + ' is a bigger and better favorite number.'
[edit] Strings
There are a variety of methods of defining strings in Ruby
The below conventions are equivalent for double quoted strings:
a = "\nThis is a double quoted string\n"
a = %Q{\nThis is a double quoted string\n}
a = <<BLOCK
 
This is a multi-line double quoted string
BLOCK
a = %/\nThis is a double quoted string\n/
The below conventions are equivalent for single quoted strings:
a = 'This is a single quoted string'
a = %q{This is a single quoted string}
[edit] Collections
Constructing and using an array:
a = [1,'hi', 3.14, 1, 2, [4, 5]]
 
p a[2]           # 3.14
p a.[](2)        # 3.14
p a.reverse      # [[4, 5], 2, 1, 3.14, 'hi', 1]
p a.flatten.uniq # [1, 'hi', 3.14, 2, 4, 5]
Constructing and using an associative array:
hash = { :water => 'wet', :fire => 'hot' }
puts hash[:fire] # Prints:  hot
 
hash.each_pair do |key, value| # Or:  hash.each do |key, value|
  puts "#{key} is #{value}"
end
 
# Prints:  water is wet
#          fire is hot
 
hash.delete :water # Deletes :water => 'wet'
hash.delete_if {|k,value| value=='hot'} # Deletes :fire => 'hot'
[edit] Blocks and iterators
The two syntaxes for creating a code block:
{ puts "Hello, World!" } # Note the { braces }
#or
do puts "Hello, World!" end
Parameter-passing a block to be a closure:
# In an object instance variable (denoted with '@'), remember a block.
def remember(&a_block)
  @block = a_block
end
 
# Invoke the above method, giving it a block which takes a name.
remember {|name| puts "Hello, #{name}!"}
 
# When the time is right (for the object) -- call the closure!
@block.call("Jon")
# => "Hello, Jon!"
Returning closures from a method:
def create_set_and_get(initial_value=0) # Note the default value of 0
  closure_value = initial_value
  return Proc.new {|x| closure_value = x}, Proc.new { closure_value }
end
 
setter, getter = create_set_and_get  # ie. returns two values
setter.call(21)
getter.call # => 21
Yielding the flow of program control to a block which was provided at calling 
time:
def use_hello
  yield "hello"
end
 
# Invoke the above method, passing it a block.
use_hello {|string| puts string} # => 'hello'
Iterating over enumerations and arrays using blocks:
array = [1, 'hi', 3.14]
array.each { |item| puts item }
# => 1
# => 'hi'
# => 3.14
 
array.each_index { |index| puts "#{index}: #{array[index]}" }
# => 0: 1
# => 1: 'hi'
# => 2: 3.14
 
(3..6).each { |num| puts num }
# => 3
# => 4
# => 5
# => 6
A method such as inject() can accept both a parameter and a block. Inject 
iterates over each member of a list, performing some function on while retaining 
an aggregate. This is analogous to the foldl function in functional programming 
languages. For example:
[1,3,5].inject(10) {|sum, element| sum + element} # => 19
On the first pass, the block receives 10 (the argument to inject) as sum, and 1 
(the first element of the array) as element; this returns 11. 11 then becomes 
sum on the next pass, which is added to 3 to get 14. 14 is then added to 5, to 
finally return 19.
Blocks work with many built-in methods:
File.open('file.txt', 'w') do |file| # 'w' denotes "write mode".
  file.puts 'Wrote some text.'
end                                  # File is automatically closed here
 
File.readlines('file.txt').each do |line|
  puts line
end
# => Wrote some text.
Using an enumeration and a block to square the numbers 1 to 10:
(1..10).collect {|x| x*x} # => [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
[edit] Classes
The following code defines a class named Person. In addition to 'initialize', 
the usual constructor to create new objects, it has two methods: one to override 
the <=> comparison operator (so Array#sort can sort by age) and the other to 
override the to_s method (so Kernel#puts can format its output). Here, 
"attr_reader" is an example of metaprogramming in Ruby: "attr_accessor" defines 
getter and setter methods of instance variables, "attr_reader" only getter 
methods. Also, the last evaluated statement in a method is its return value, 
allowing the omission of an explicit 'return'.
class Person
  attr_reader :name, :age
  def initialize(name, age)
    @name, @age = name, age
  end
  def <=>(person) # Comparison operator for sorting
    @age <=> person.age
  end
  def to_s
    "#@name (#@age)"
  end
end
 
group = [
  Person.new("Bob", 33), 
  Person.new("Chris", 16), 
  Person.new("Ash", 23) 
]
 
puts group.sort.reverse
The above prints three names in reverse age order:
Bob (33)
Ash (23)
Chris (16)
[edit] Exceptions
An exception is raised with a raise call:
raise
An optional message can be added to the exception:
raise "This is a message"
You can also specify which type of exception you want to raise:
raise ArgumentError, "Illegal arguments!"
Alternatively, you can pass an exception instance to the raise method:
raise ArgumentError.new( "Illegal arguments!" )
This last construct is useful when you need to raise a custom exception class 
featuring a constructor which takes more than one argument:
class ParseError < Exception
  def initialize input, line, pos
    super "Could not parse '#{input}' at line #{line}, position #{pos}"
  end
end
 
raise ParseError.new( "Foo", 3, 9 )
Exceptions are handled by the rescue clause. Such a clause can catch exceptions 
which inherit from StandardError:
begin
# Do something
rescue
# Handle exception
end
It is a common mistake to attempt to catch all exceptions with a simple rescue 
clause. To catch all exceptions one must write:
begin
# Do something
rescue Exception # don't write just rescue -- that only catches StandardError, a subclass of Exception
# Handle exception
end
Or catch particular exceptions:
begin
# ...
rescue RuntimeError 
# handling
end
It is also possible to specify that the exception object be made available to 
the handler clause:
begin
# ...
rescue RuntimeError => e
# handling, possibly involving e, such as "print e.to_s"
end
Alternatively, the most recent exception is stored in the magic global $!.
You can also catch several exceptions:
begin
# ...
rescue RuntimeError, Timeout::Error => e
# handling, possibly involving e
end
Or catch an array of exceptions:
array_of_exceptions = [RuntimeError, Timeout::Error]
begin
# ...
rescue *array_of_exceptions => e
# handling, possibly involving e
end
[edit] Metaprogramming
Ruby provides a programmer the ability to add to or modify methods in the 
language's Standard Library during runtime, as well for a Ruby program to modify 
itself during its operation without generating source code, techniques known as 
metaprogramming. A simple example of adding a new method to the Standard 
Library's Time class:
# re-open Ruby's Time class
class Time
  def yesterday
    self - 86400
  end
end
 
today = Time.now # => Thu Aug 14 16:51:50 +1200 2008
yesterday = today.yesterday # => Wed Aug 13 16:51:50 +1200 2008
[edit] More examples
More sample Ruby code is available as algorithms in the following articles:
  Exponentiating by squaring 
  Trabb Pardo-Knuth algorithm 
[edit] Implementations
  See also: Ruby MRI#Operating systems 
Ruby has two main implementations: The official Ruby interpreter often referred 
to as the Matz's Ruby Interpreter or MRI, which is the most widely used, and 
JRuby, a Java-based implementation.
There are other less known implementations such as IronRuby (pre-alpha sources 
available on August 31st, 2007[24]), Rubinius, Ruby.NET, XRuby and YARV. YARV is 
Ruby 1.9's official new virtual machine and is no longer a separate project.
The maturity of Ruby implementations tend to be measured by their ability to run 
Rails (because this is a complex framework to implement, and it uses a lot of 
Ruby-specific features). The point when a particular implementation achieves 
this goal is called The Rails singularity. As of May 2008, only the reference 
implementation (MRI) and JRuby are able to run Rails unmodified in a production 
environment[25]. IronRuby[26][27] and Rubinius[28] start to be able to run Rails 
test cases, but they still are far from production ready for this task.
As of Ruby MRI, Ruby is available on a lot of operating systems such as Linux, 
Mac OS X, Microsoft Windows, Windows CE and most flavors of Unix.
[edit] Criticism
  As variables are declared simply by assigning a value to them, typing errors 
  can introduce new variables and cause unexpected behavior.[29] 
  Being a dynamically typed language, errors can occur during the execution of 
  the program if a variable were to be assigned a value of the wrong type. This 
  is common to all dynamically typed languages, such as Lisp, JavaScript, and 
  Python. In Ruby's case the interpreter would not catch the initial 
  mis-assignment, but in most circumstances will throw an error if the 
  mis-assigned variable is later treated as a type that it is not, as opposed to 
  the silent type conversion of some languages. 
  Ruby's ability for metaprogramming allows a programmer to modify methods in 
  the language's Standard Library during runtime, a practice known as monkey 
  patching. This can lead to possible collisions of behavior and subsequent 
  unexpected results, and is a concern if done recklessly for code scalability. 
  [30]. 
  The Ruby threading model uses green threads [31], and its model has some 
  inherent limitations which render it difficult to use or unsafe in some 
  scenarios.[32] 
  Ruby 1.8 does not yet have native support for Unicode or multibyte 
  strings,[33] although 1.9 added multiple improvements in this area.[citation 
  needed] 
  Ruby suffers from backward compatibility problems.[34] 
  Ruby code runs slower than many compiled languages (as is typical for 
  interpreted languages) and other major scripting languages such as Python and 
  Perl[35]. However, in future releases (current revision: 1.9), Ruby will be 
  bytecode compiled to be executed on YARV (Yet Another Ruby VM). The 
  performance of YARV is currently very similar to those of other scripting 
  languages such as Python.[35] 
Ruby 2.0 aims to address some of the aforementioned problems:
  Native threads will be used instead of green threads.[36] 
  Full support for Unicode strings. 
Some problems which may not be solved in version 2.0 include:
  Ruby still lacks a specification, the current C implementation being the de 
  facto reference specification.[37][38] However the work for a specification is 
  officially ongoing with a project named RubySpec based on the work started by 
  the Rubinius project. [39] The creator of Ruby has expressed his plans to make 
  Ruby an ISO standard, which he deems will take some time to be completed.[40] 
[edit] Repositories and libraries
The Ruby Application Archive (RAA), as well as RubyForge, serve as repositories 
for a wide range of Ruby applications and libraries, containing more than seven 
thousand items. Although the number of applications available does not match the 
volume of material available in the Perl or Python community, there are a wide 
range of tools and utilities which serve to foster further development in the 
language.
RubyGems has become the standard package manager for Ruby libraries. It is very 
similar in purpose to Perl's CPAN, although its usage is more like apt-get.
[edit] See also
      Free software portal
  Duck typing 
  Comparison of programming languages 
  Watir 
  Ruby MRI, the reference C implementation 
  JRuby 
  MacRuby 
  IronRuby 
  Rubinius 
  XRuby 
  Ramaze 
  Ruby on Rails 
[edit] References
  ^ http://www.ruby-lang.org/en/about/ Ruby-Lang About Ruby 
  ^ http://www.linuxdevcenter.com/pub/a/linux/2001/11/29/ruby.html An Interview 
  with the Creator of Ruby 
  ^ http://blog.nicksieger.com/articles/2006/10/20/rubyconf-history-of-ruby 
  History of Ruby 
  ^ http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/88819 "[FYI: 
  historic] The desicive moment of the language name Ruby. (Re: [ANN] ruby 
  1.8.1)" - Email from Hiroshi Sugihara to ruby-talk 
  ^ http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/394 "Re: the 
  name of Ruby?" - Email from Yukihiro Matsumoto to ruby-talk 
  ^ An Interview with the Creator of Ruby 
  ^ http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/394 "Re: the 
  name of Ruby?" - Email from Yukihiro Matsumoto to ruby-talk 
  ^ http://eigenclass.org/hiki/ruby+0.95 More archeolinguistics: unearthing 
  proto-Ruby 
  ^ http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/382 "Re: history 
  of ruby" - Email from Yukihiro Matsumoto to ruby-talk 
  ^ http://blog.nicksieger.com/articles/2006/10/20/rubyconf-history-of-ruby 
  History of Ruby 
  ^ http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/124 "TUTORIAL - 
  ruby's features" - Email From Yukihiro Matsumoto to ruby-list 
  ^ http://blog.nicksieger.com/articles/2006/10/20/rubyconf-history-of-ruby A 
  History of Ruby 
  ^ http://www.linuxdevcenter.com/pub/a/linux/2001/11/29/ruby.html An Interview 
  with the Creator of Ruby 
  ^ The Ruby Programming Language by Yukihiro Matsumoto on 2000-06-12 
  (informit.com) 
  ^ The Philosophy of Ruby, A Conversation with Yukihiro Matsumoto, Part I by 
  Bill Venners on 2003-09-29 (Artima Developer) 
  ^ The Philosophy of Ruby, A Conversation with Yukihiro Matsumoto, Part I by 
  Bill Venners on 2003-09-29 (Artima Developer) 
  ^ Ruby Weekly News 23rd - 29th May 2005 
  ^ The Philosophy of Ruby 
  ^ Leverett, D. (2006-09-15). "Ruby - Add class methods at runtime". Retrieved 
  on 2007-11-01. 
  ^ Green threads 
  ^ Ruby FAQ 
  ^ How Does Ruby Compare With Python? (FAQ) 
  ^ In Ruby's syntax, statement is just a special case of a expression which 
  cannot appear as a argument (e.g. multiple assignment). 
  http://ruby-talk.com/1120
  statement [...] can not be part of expression unless grouped within 
  parentheses. http://ruby-talk.com/2460 
  ^ John Lam. "IronRuby on Rubyforge!". Retrieved on 2007-08-31. 
  ^ Charles Nutter (2008-04-27). "Promise and Peril for Alternative Ruby Impls". 
  Retrieved on 2008-06-01. 
  ^ John Lam (2008-05-25). "IronRuby / Rails Question". Retrieved on 2008-05-25. 

  ^ John Lam (2008-05-30). "IronRuby and Rails". Retrieved on 2008-06-01. 
  ^ Evan Phoenix (2008-05-17). "Rails on Rubinius". Retrieved on 2008-05-25. 
  ^ What’s Wrong With Ruby? 
  ^ [http://avdi.org/devblog/2008/02/23/why-monkeypatching-is-destroying-ruby/ 
  Monkeypatching is Destroying Ruby 
  ^ Ruby Threading - RubySpec 
  ^ Writing a standlone, threaded application using Ruby On Rails at 
  KILLERSITES.COM 
  ^ Headius: Unicode in Ruby, Unicode in JRuby? 
  ^ InfoQ: Ruby 1.9 released 
  ^ a b The Computer Language Benchmarks Game 
  ^ Gluttonous : YARV Progress Report 
  ^ Headius: What Would I (Will I?) Change About Ruby 
  ^ From Java to Ruby 
  ^ RubySpec 
  ^ RubyKaigi 2008: Standardization, 1.9 Roadmap 
[edit] External links
Wikibooks has a book on the topic of 
Ruby ProgrammingAt Wikiversity, you can learn about: Topic:RubyRuby language 
  home page 
  Ruby documentation site 
  Ruby.on-page.net — the simplest Ruby manual with many samples 
  Ruby programming language at the Open Directory Project 
  Ruby User Guide By Matz, the creator of Ruby. Translated into English. 
  Ruby From Other Languages 
  Wiki: Ruby language and implementation specification 
  Writing C Extensions to Ruby (MRI 1.8) 
  RubyFlow: Community Filtered Ruby News 
            [hide]v • d • eRuby programming language

            InterpretersIronRuby · JRuby · XRuby · Rubinius · Ruby MRI · YARV

            ApplicationsRake · Capistrano · Interactive Ruby Shell · SketchUp 
            Ruby · mod_ruby

            Libraries and frameworksCamping · Cerise · ERuby · IOWA · Merb · 
            Mongrel · Nitro · RadRails · Ramaze · RubyGems · Ruby on Rails · 
            WEBrick

            OtherHackety Hack · Ruby Application Archive · Ruby Central · Ruby 
            Document format · RubyForge · Why's (poignant) Guide to Ruby


Retrieved from "http://en.wikipedia.org/wiki/Ruby_(programming_language)"
Categories: Class-based programming languages | Dynamically-typed programming 
languages | Scripting languages | Curly bracket programming languages | Articles 
with example Ruby code | Ruby programming language
Hidden categories: All articles with unsourced statements | Articles with 
unsourced statements since May 2008
ViewsArticle Discussion Edit this page History Personal toolsLog in / create 
  account Navigation
  Main page 
  Contents 
  Featured content 
  Current events 
  Random article 
Search
    Interaction
  About Wikipedia 
  Community portal 
  Recent changes 
  Contact Wikipedia 
  Donate to Wikipedia 
  Help 
Toolbox
  What links here 
  Related changes 
  Upload file 
  Special pages 
  Printable version 
  Permanent link
  Cite this page 
Languages
  العربية 
  বাংলা 
  Български 
  Català 
  Česky 
  Dansk 
  Deutsch 
  Español 
  Esperanto 
  Euskara 
  فارسی 
  Français 
  Galego 
  한국어 
  Hrvatski 
  Bahasa Indonesia 
  Interlingua 
  Italiano 
  עברית 
  ქართული 
  Kurdî / كوردی 
  Lietuvių 
  Magyar 
  Nederlands 
  日本語 
  ‪Norsk (bokmål)‬ 
  ‪Norsk (nynorsk)‬ 
  Polski 
  Português 
  Română 
  Русский 
  Српски / Srpski 
  Suomi 
  Svenska 
  தமிழ் 
  ไทย 
  Tiếng Việt 
  Тоҷикӣ 
  Türkçe 
  Українська 
  粵語 
  Žemaitėška 
  中文 

  This page was last modified on 28 October 2008, at 19:33. All text is 
  available under the terms of the GNU Free Documentation License. (See 
  Copyrights for details.) 
  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. 
  registered 501(c)(3) tax-deductible nonprofit charity.
  Privacy policy About Wikipedia Disclaimers 