#!/usr/bin/env ruby
# encoding: UTF-8

require "optparse"
require "irb/locale"

require "fairy"
require "fairy/share/base-app"
require "fairy/share/vfile"

$0 = "fairy cp #{ARGV.join(' ')}"

module Fairy
  class CopyAPP<BaseAPP

    def initialize
      super

      @master_host = ENV["FAIRY_MASTER_HOST"]
      @master_host ||= CONF.MASTER_HOST
      @master_port = ENV["FAIRY_MASTER_PORT"]
      @master_port ||= CONF.MASTER_PORT

      @split_size = CONF.VF_SPLIT_SIZE
      @split_no = nil

      @sources = nil
      @target = nil
    end

    def parse_arg
      super

      @target = ARGV.pop
      if ARGV.size > 1
	puts "#{$0}: Can't specify multi sources(#{ARGV.join(' ')})."
	exit 1
      end
      if File.directory?(@target)
	puts "#{$0}: Can't specify the target(#{@target}) as a directory."
	exit 1
      end

      @sources = ARGV
    end

    def option_parser
      super do |opt|
	opt.on("-m VAL"){|val| @master_host = val}
	opt.on("-h", "--master_host=VAL"){|val| @master_host = val}
	opt.on("-p", "--master_port=VAL"){|val| @master_port = val}
	opt.on("--split=VAL", "specify split file size"){|val| @split_size = parse_split(val)}
	opt.on("--split-no=VAL", "specify split file no"){|val| @split_no = val.to_i}
      end
    end

    def parse_split(val)
      case val
      when /^[0-9]+b?$/
	val.to_i
      when /^[0-9]+[kK]$/
	val.to_i*1024
      when /^[0-9]+[mM]$/
	val.to_i*1024*1024
      when /^[0-9]+[gG]$/
	val.to_i*1024*1024*1024
      else
	puts "#($0): Can't recognized --split #{val}"
	exit 1
      end
    end

    def start
      for src in @sources
	copy(src, @target)
      end
    end

    def copy(src, target)
      if !VFile.vfile?(src) && VFile.vfile?(target)
	ret = copy_to_fairy(src, target)
      elsif VFile.vfile?(src) && !VFile.vfile?(target)
	ret = copy_from_fairy(src, target)
      elsif VFile.vfile?(src) && VFile.vfile?(target)
	ret = copy_on_fairy(src, target)
      else
	ret = copy_on_local(src, target)
      end
    end

    def copy_to_fairy(src, target)
      fairy = Fairy.new(@master_host, @master_port)
      if @split_no
	fairy.input(src, :split_no => @split_no).output(target)
      else
	fairy.input(src, :split_size => @split_size).output(target)
      end

      
    end

    def copy_from_fairy(src, target)
      fairy = Fairy.new(@master_host, @master_port)
      
      fairy.input(src).output(target)
    end

    def copy_on_fairy(src, target)
      fairy = Fairy.new(@master_host, @master_port)
      
      fairy.input(src).output(target)
    end

    def copy_on_local(src, target)
      #system("cp", src, target)
      fairy = Fairy.new(@master_host, @master_port)
      
      fairy.input(src).output(target)
    end

  end
end

Fairy::CopyAPP.start
#sleep 10
